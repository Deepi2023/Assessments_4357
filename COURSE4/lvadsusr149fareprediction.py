# -*- coding: utf-8 -*-
"""LVADSUSR149FAREPREDICTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V0Xg8WH4pXc-QC5QvraWZbBLNuBZXKVd
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import xgboost as xgb

df=pd.read_csv('/content/sample_data/Fare prediction.csv')
df.head(10)

#checking null values
df.isnull().sum()

#checking duplicates
df.duplicated().sum()

df.describe()

df.info()

df.shape

#detecting outliers values
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#handling the outliers
for columns in df.select_dtypes(include="number"):
  q1=df[columns].quantile(0.25)
  q3=df[columns].quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  new_df=df.loc[(df[columns]<upper)&(df[columns]>lower)]

#encoding
for i in df.columns:
  if df[i].dtype==np.number:
    continue
  df[i]=label_encoder.fit_transform(df[i])

df.info()

#correlation analysis
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

df.head(10)

x=df.drop(columns=['fare_amount'])
x=StandardScaler().fit_transform(x)
y=df['fare_amount']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

model=RandomForestRegressor()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

#model evaluation for regression
mse = mean_squared_error(y_test, y_pred)

# Mean Absolute Error (MAE)
mae = mean_absolute_error(y_test, y_pred)

# R-squared (Coefficient of determination)
r_squared = r2_score(y_test, y_pred)

print("Mean Squared Error",mse)
print("Mean_absolute Error",mae)
print("R squared Error",r_squared)