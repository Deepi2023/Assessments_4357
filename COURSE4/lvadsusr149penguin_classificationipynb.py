# -*- coding: utf-8 -*-
"""LVADSUSR149PENGUIN-CLASSIFICATIONipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14eE0XHHUWqh_ri8OO59C7dHqSrM-czxj
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix,recall_score,f1_score
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
import xgboost as xgb

df=pd.read_csv('/content/sample_data/penguins_classification.csv')
df.head(10)

df.describe()

df.shape

df.info()

#checking null values
df.isnull().sum()

#handling null values
imputer=KNNImputer()
for i in df.select_dtypes(include='number').columns:
  df[i]=imputer.fit_transform(df[[i]])

#checking for duplicates
df.duplicated().sum()

#detecting outliers values
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#handling outliers
for columns in df.select_dtypes(include="number"):
  q1=df[columns].quantile(0.25)
  q3=df[columns].quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  new_df=df.loc[(df[columns]<upper)&(df[columns]>lower)]

#encoding
for i in df.columns:
  if df[i].dtype==np.number:
    continue
  df[i]=label_encoder.fit_transform(df[i])

df.info()

#correlation analysis
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
# Compute the correlation matrix for numerical variables
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

#scaling
x=df.drop(columns=['species'])
y=df['species']
x=StandardScaler().fit_transform(x)
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)

# model=LogisticRegression()
model=DecisionTreeClassifier()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)
y_pred

y_test

df.info()

#model evaluation
accuracy = accuracy_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

print("Accuracy of the model",accuracy)
print("Recall of the model",recall)
print("F1 score of the model",f1)
print("confusion matrix of the model",conf_matrix)
print("classification Report of the model",class_report)