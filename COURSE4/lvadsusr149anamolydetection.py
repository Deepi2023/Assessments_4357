# -*- coding: utf-8 -*-
"""LVADSUSR149ANAMOLYDETECTION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Es7GDWmbAu2EoiwH8VKhkTaAao0A2gMP
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder,MinMaxScaler
label_encoder = LabelEncoder()
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
import warnings
warnings.filterwarnings('ignore')
from sklearn import preprocessing
from sklearn.impute import KNNImputer
import seaborn as sns

df=pd.read_csv('/content/sample_data/anomaly_train.csv')
df.head(10)

df.describe()

df.info()

#checking null values
df.isnull().sum()

#checking duplicate values
df.duplicated().sum()

#identifying the correlation
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numerical_columns].corr()
print("Correlation matrix:\n", correlation_matrix)

#analysing using heat map
plt.figure(figsize=(20, 8))
sns.heatmap(correlation_matrix, annot=True, fmt=".2f", cmap='coolwarm')
plt.title('Heatmap of Correlation Matrix')
plt.show()

df.info()

# for finding the feature
data_with_const = add_constant(df)
vif_data = pd.DataFrame()
vif_data["Variable"] = data_with_const.columns
vif_data["VIF"] = [variance_inflation_factor(data_with_const.values, i) for i in range(data_with_const.shape[1])]
print("VIF values:")
print(vif_data)

#feature selection
features=df.drop(columns=['Type','Location'])
model = IsolationForest(n_estimators=100, contamination=0.1)
model.fit(features)
k=df

y_pred = model.predict(features)
#creating the column named anamoly score
df['anomaly_score']=model.decision_function(features)

#segregating those anamolies
anomalies = df.loc[df["anomaly_score"] < 0]
anomalies

df.info()

#loading dataset as test
df_test=pd.read_csv('/content/sample_data/anomaly_train.csv').head(10)
x=df_test.drop(columns=['Type','Location'])
df_values=x.values
df_test
plt.scatter(df["User"], df["anomaly_score"], label="Normal")
plt.scatter(anomalies["User"], anomalies["anomaly_score"],color="green", label="Anomaly")
plt.xlabel("Type")
plt.ylabel("anomaly_score")
plt.legend()
plt.show()

for i in range(df.shape[0]):
  if(df['anomaly_score'][i]>=0):
    df['anamoly_']='no'
  elif(df['anomaly_score'][i]<0):
    df['anamoly_']='yes'
df