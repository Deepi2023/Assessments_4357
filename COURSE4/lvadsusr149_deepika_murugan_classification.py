# -*- coding: utf-8 -*-
"""LVADSUSR149 DEEPIKA MURUGAN CLASSIFICATION.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1U1FszzlwwLPKXAMrrqmB-R3lJHjQN80x
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns
# import statsmodels.api as sm

from sklearn.preprocessing import MinMaxScaler,StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.impute import KNNImputer
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler

df=pd.read_csv('/content/sample_data/winequality-red.csv')
df.head(5)

#A handling missing value and outliers
df.isnull().sum()
# kNNImputer to fill the missing values
impute=KNNImputer()
for i in df.select_dtypes(include='number').columns:
  df[i]=impute.fit_transform(df[[i]])

#checking null value
df.isnull().sum()

#identifying the outliers
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns

# Create a box plot for each numerical column
for column in numerical_columns:
    plt.figure(figsize=(10, 6))  # Set the figure size for better readability
    sns.boxplot(x=df[column])
    plt.title(f'Box Plot of {column}')
    plt.xlabel(column)
    plt.show()

#handling the outliers
for columns in df.select_dtypes(include="number"):
  q1=df[columns].quantile(0.25)
  q3=df[columns].quantile(0.75)
  iqr=q3-q1
  lower=q1-1.5*iqr
  upper=q3+1.5*iqr
  new_df=df.loc[(df[columns]<upper)&(df[columns]>lower)]

df.info()

# #Data transformation
# condition1=df.loc[(df['quality']>=3) & (df['quality']<=6)]
# condition2=df.loc[(df['quality']>=7) &(df['quality']<=8)]
# condition3=df.loc[(df['quality']==0)]
# condition1['quality']='Bad'
# condition2['quality']='Good'
# condition3['quality']='high'

#encoding and normalization
x=df.drop(columns=['quality'])
x=StandardScaler().fit_transform(x)
y=df['quality']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2)
model = RandomForestClassifier(random_state=42)
model.fit(x_train,y_train)

y_predict=model.predict(x_test)

#accuracy prediction
accuracy_score(y_test,y_predict)

x=pd.Series(y_predict)
if (x)==0:
  print("bad")
elif((x)>=3 and (x)<=6):
  print("good")
else:
  print("High")